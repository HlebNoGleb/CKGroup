@using CKGroup.UmbracoPublishedModels
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<CKGroup.UmbracoPublishedModels.Calculator>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@{
	Layout = "Master.cshtml";
	var root = Umbraco.ContentAtRoot();
	var equipment = root.First(x => x.ContentType.Alias == Equipment.ModelTypeAlias).SafeCast<Equipment>();
	var equipmentItems = equipment.EquipmentItems.Count > 0 ? equipment.EquipmentItems.Select(x => x.Content).OfType<EquipmentItem>() : Enumerable.Empty<EquipmentItem>();
}

<main class="main" style="padding-top: 200px">
	<select id="equipment" onchange="setEquipment()">
		<option>Выберите оборудование</option>
		@foreach (var equipmentItem in equipmentItems)
		{
			<p>@equipmentItem.EquipmentItemName</p>
			var types = equipmentItem.Type.Select(x => x.Content).OfType<EquipmentType>();
			foreach (var type in types)
			{
				<p>@type.EquipmentTypeName</p>
				@* <p>@type.Algoritm</p> *@
				@* foreach (var coin in type.Coins) *@
				@* { *@
				@* 	<p>@coin</p> *@
				@* } *@
				<option data-consumption="@type.Potreblenie" data-hashrate="@type.Hashrate">@equipmentItem.EquipmentItemName - @type.EquipmentTypeName</option>
				@* <p>@type.Price</p> *@
			}

			<hr/>
		}
	</select>
	<div style="display: grid; grid-template-columns: 1fr 1fr 1fr">
		<div>
			<label for="electricityCost">Стоимость электричества (1 к-ват)</label>
			<input type="number" id="electricityCost" min="0.01" value="0.01">
		</div>
		<div>
			<label for="hashrate">Хэшрейт (TH/s)</label>
			<input type="number" id="hashrate" value="190" min="1">
		</div>
		<div>
			<label for="consumption">Потребление (ват/час)</label>
			<input type="number" id="consumption" min="1" value="1">
		</div>
		<div>
			<label for="rateUSD">Курс доллара</label>
			<input type="number" id="rateUSD" min="1" value="1">
		</div>
		<div>
			<label for="rateBTC">Курс биткойна</label>
			<input type="number" id="rateBTC" min="1" value="64187.1">
		</div>
		<div>
			<label for="commission">Комиссия</label>
			<input type="number" id="commission" min="0" value="0">
		</div>
		<div>
			<label for="dailyIncomeTh_s_usdt">dailyIncomeTh_s_usdt</label>
			<input type="text" id="dailyIncomeTh_s_usdt">
		</div>
		<div>
			<label for="difficulty">difficulty</label>
			<input type="text" id="difficulty" value="86871474313762">
		</div>
		<div>
			<label for="hashrate_s">hashrate_s</label>
			<input type="text" id="hashrate_s" value="1000000000000">
		</div>
		<div>
			<label for="blockReward">blockReward</label>
			<input type="text" id="blockReward" value="3.125">
		</div>
	</div>
	
	<div id="result">
		<div class="result-grid" style="display: grid; grid-template-columns: repeat(4, 1fr)">
			<div></div>
			<div>День</div>
			<div>Неделя</div>
			<div>Месяц</div>
			<div>Доход</div>
			<div id="dayIncome">1</div>
			<div id="weekIncome">7</div>
			<div id="monthIncome">30</div>
			<div>Расход</div>
			<div id="dayOutGo">1</div>
			<div id="weekOutGo">7</div>
			<div id="monthOutGo">30</div>
		</div>
		<div>
			<select id="currency">
				<option data-rateUSD="1">usd</option>
				<option data-rateUSD="92.80">rub</option>
			</select>
		</div>
		<div id="monthProfit"></div>
	</div>
	
	<button onclick="calcResult()">Calc</button>
	
	<script>
		function setEquipment() {
			const equipment = document.getElementById("equipment").options[document.getElementById("equipment").selectedIndex];
			const consumption = equipment.getAttribute("data-consumption");
			const hashrate = equipment.getAttribute("data-hashrate");
			console.log(consumption, hashrate)
			document.getElementById("consumption").value = consumption
			document.getElementById("hashrate").value = hashrate

		}
		
		function updateResultTable(data){
			document.getElementById("dayIncome").innerHTML = `${data.income.day} ${data.currency.name}`
			document.getElementById("weekIncome").innerHTML = `${data.income.week} ${data.currency.name}`
			document.getElementById("monthIncome").innerHTML = `${data.income.month} ${data.currency.name}`
			document.getElementById("dayOutGo").innerHTML = `${data.outgo.day} ${data.currency.name}`
			document.getElementById("weekOutGo").innerHTML = `${data.outgo.week} ${data.currency.name}`
			document.getElementById("monthOutGo").innerHTML = `${data.outgo.month} ${data.currency.name}`
			document.getElementById("monthProfit").innerHTML = `${data.monthProfit} ${data.currency.name}`
		}
		
		function calcResult() {
			const currencyRate = parseFloat(document.getElementById("currency").options[document.getElementById("currency").selectedIndex].getAttribute("data-rateUSD"))
			const currency = document.getElementById("currency").options[document.getElementById("currency").selectedIndex].text
			const commission = parseFloat(document.getElementById("commission").value);
				
			const dayIncomeWithoutComission = calcIncome() * currencyRate;
			const dayIncome = Math.round((dayIncomeWithoutComission + (dayIncomeWithoutComission * commission) / 100) * 100) / 100
			const weekIncome = Math.round((dayIncome * 7) * 100) / 100;
			const monthIncome = Math.round((dayIncome * 30) * 100) / 100;
			
			const dayOutGo = Math.round((calcOutGo() * currencyRate) * 100) / 100;	
			const weekOutGo = Math.round((dayOutGo * 7) * 100) / 100;
			const monthOutGo = Math.round((dayOutGo * 30) * 100) / 100;
			
			const monthProfit = monthIncome - monthOutGo;
			updateResultTable({
				currency: {
					name: currency
				},
				income: {
					day: dayIncome,
					week: weekIncome,
					month: monthIncome
				},
				outgo: {
					day: dayOutGo,
					week: weekOutGo,
					month: monthOutGo
				},
				monthProfit: monthProfit
			})
		}
		
		function calcOutGo() {
			const consumption = parseFloat(document.getElementById("consumption").value) / 1000;
			const electricityCost = parseFloat(document.getElementById("electricityCost").value);
			return consumption * electricityCost			
		}
		
		function calcIncome(){
			const dailyIncomeTH_s_usdt = calcDailyIncomeTH_s_usdt();
			const hashrate = parseFloat(document.getElementById("hashrate").value)
			const result = dailyIncomeTH_s_usdt * hashrate;
			return result;
		}
		
		function calcDailyIncomeTH_s_usdt() {
			const dayInSec = 86400;
			const difficulty = parseFloat(document.getElementById("difficulty").value)
			const blockReward = parseFloat(document.getElementById("blockReward").value)
			const hashrate_s = parseFloat(document.getElementById("hashrate_s").value)
			const rateBTC = parseFloat(document.getElementById("rateBTC").value)

			//console.log(dayInSec, blockReward, hashrate_s, difficulty);
			const first = BigInt(dayInSec * blockReward * hashrate_s)
			//console.log(first)
			const second = BigInt(difficulty * 2**32)
			//console.log(second)
			const incomeInCoins = (Number(first) / Number(second)).toFixed(8)
			console.log(incomeInCoins)
			//console.log(rateBTC)
			const dailyIncomeTh_s_usdt = Number(incomeInCoins * rateBTC)
			//console.log(dailyIncomeTh_s_usdt)
			return dailyIncomeTh_s_usdt;
		}
	
	
	</script>
</main>
